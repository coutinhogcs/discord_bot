import os
import discord
import requests
import aiohttp
from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.genai.errors import APIError
import asyncio # MUDAN√áA: Importado para o !limpar funcionar corretamente

# --- Configura√ß√£o de Vari√°veis de Ambiente ---
load_dotenv() # Carrega o .env (incluindo GOOGLE_API_KEY)
DISCORD_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")
GOOGLE_API_KEY_LOADED = os.getenv("GOOGLE_API_KEY") # MUDAN√áA: Lendo a chave correta para verifica√ß√£o

# --- Configura√ß√£o Global da LLM (Usando SUA configura√ß√£o do AI Studio) ---

# 1. Defini√ß√£o da Persona/Instru√ß√£o do Sistema
SYSTEM_INSTRUCTION_TEXT = """
Voc√™ √© um agente de uma comunidade digital que passa informa√ß√µes sobre sites de emprego no brasil. O nome dessa comunidade √© Serb.
Voc√™ vai dar informa√ß√µes sobre vaga, informa√ß√µes de como melhorar o curriculo e tudo que ajude a uma pessoa conseguir o seu emprego.
Voc√™ poder√° responder enviando links de sites que publicam vagas como gupy, linkedin, glassdor, programathor entre outros.
Voc√™ ir√° procurar na internet como e formar curr√≠culos que esses pr√≥prios sites leem e colocam em primeiro lugar.
Voc√™ vai tirar qualquer d√∫vida de vaga sempre que possivel.
Voc√™ deve responder de forma agrad√°vel sempre que alguem perguntar de forma neutra ou agrad√°vel. E sempre que houver agressividade voc√™ deve responder de forma emp√°tica. Nos dos casos deve sempre adicionar emoji as resposta.
Sempre que for solicitado que voc√™ encontre vaga de algo, como back end voc√™ deve enviar um link onde j√° ache a p√°gina com vagas backend do site requisitado.
Voc√™ deve apenas se ater no quesito emprego.
Voc√™ deve ler pdfs e montar em forma de texto melhorias para o curr√≠culos das pessoas.
"""

# 2. Defini√ß√£o da Configura√ß√£o de Gera√ß√£o (temperatura, tools, system_instruction)
GENERATION_CONFIG = types.GenerateContentConfig(
    temperature=2,
    tools=[types.Tool(googleSearch=types.GoogleSearch())],
    system_instruction=[types.Part.from_text(text=SYSTEM_INSTRUCTION_TEXT)],
)



# --- Inicializa√ß√£o da API ---
client_ai = genai.Client()


# --- MUDAN√áA: Gerenciamento de Hist√≥rico (Escal√°vel) ---
# Dicion√°rio global para armazenar chats. A chave √© o user_id.
# Substitui o 'global gemini_chat' para que 100 pessoas possam falar ao mesmo tempo
chat_histories = {}

def get_or_create_chat(user_id: int):
    """
    Pega o hist√≥rico de chat de um usu√°rio. Se n√£o existir, cria um novo.
    """
    if user_id not in chat_histories:
        print(f"Criando novo hist√≥rico de chat para o usu√°rio {user_id}")
        # MUDAN√áA: Corrigido para usar a sua sintaxe de cria√ß√£o de chat
        chat_histories[user_id] = client_ai.chats.create(model='gemini-2.5-pro', config=GENERATION_CONFIG)
    
    return chat_histories[user_id]

def reset_chat(user_id: int):
    """
    Apaga o hist√≥rico de chat de um usu√°rio.
    """
    if user_id in chat_histories:
        del chat_histories[user_id]
        print(f"Hist√≥rico de chat resetado para o usu√°rio {user_id}")
        return True
    return False

# --- Fun√ß√µes Auxiliares de Discord e Webhook (Seu c√≥digo, sem altera√ß√£o) ---

def _split_discord_message(text: str, chunk_size: int = 2000):
    if text is None:
        return []
    s = str(text)
    return [s[i:i+chunk_size] for i in range(0, len(s), chunk_size)] or [""]


async def send_webhook_message(webhook_url: str, content: str, username: str = "Agente Serb (Gemini AI)", avatar_url: str = None):
    """Envia mensagem via Webhook de forma ass√≠ncrona; retorna True se ok."""
    safe_content = (content or "").strip()
    if not safe_content:
        print("Aviso: conte√∫do vazio; envio via Webhook ignorado.")
        return False

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=20)) as session:
            for chunk in _split_discord_message(safe_content):
                payload = {
                    "content": chunk,
                    "username": username,
                    "avatar_url": avatar_url,
                }
                async with session.post(webhook_url, json=payload) as resp:
                    if resp.status < 200 or resp.status >= 300:
                        text = await resp.text()
                        print(f"Erro Webhook HTTP {resp.status}: {text}")
                        return False
    except Exception as e:
        print(f"Erro ao enviar mensagem via Webhook (async): {e}")
        return False
    return True

# --- Configura√ß√£o do Discord Bot (Nova Estrutura) ---

intents = discord.Intents.default()
intents.message_content = True 
client = discord.Client(intents=intents)

# MUDAN√áA: ...e ligamos ele a uma 'CommandTree'
# Esta 'tree' √© o que gerencia os comandos de barra
tree = discord.app_commands.CommandTree(client)


# --- MUDAN√áA: Evento de Inicializa√ß√£o (Sincroniza os comandos de barra) ---
@client.event
async def on_ready():
    # Sincroniza a √°rvore de comandos com o Discord
    await tree.sync() 
    print(f'Bot est√° logado como {client.user} e pronto para interagir como Agente Serb.')
    print(f'Comandos de barra sincronizados. ({len(await tree.fetch_commands())} comandos)')


# --- MUDAN√áA: NOVOS Comandos de Barra (/serb e /resetar) ---

# Comando /serb (Esta √© a mudan√ßa que voc√™ pediu de @jobot para /serb)
@tree.command(name="serb", description="Fa√ßa qualquer pergunta para o Agente Serb (Gemini AI)")
async def chat_command(interaction: discord.Interaction, *, pergunta: str):
    """
    Este √© o comando principal que substitui a @men√ß√£o.
    'pergunta' √© o argumento obrigat√≥rio que o usu√°rio digita.
    """
    
    # Resposta inicial ("thinking...") - 'ephemeral=True' (s√≥ o usu√°rio v√™)
    await interaction.response.defer(thinking=True, ephemeral=True)
    
    user_id = interaction.user.id
    
    try:
        # Pega o hist√≥rico correto (ou cria um novo)
        gemini_chat = get_or_create_chat(user_id)
        
        # Envia a pergunta para o Gemini
        response = gemini_chat.send_message(pergunta)
        gemini_text = response.text
        
        # Envia a resposta diretamente no canal (sem webhook necess√°rio)
        for part in _split_discord_message(gemini_text):
            await interaction.channel.send(part)

        # Avisa o usu√°rio que a resposta foi enviada
        await interaction.followup.send("‚úÖ Sua pergunta foi respondida no canal.", ephemeral=True)

    except APIError as e:
        print(f"Erro da API Gemini: {e}")
        await interaction.followup.send("‚ùå Desculpe, houve um erro ao processar sua solicita√ß√£o no Gemini.", ephemeral=True)
    except Exception as e:
        print(f"Erro geral: {e}")
        await interaction.followup.send("‚ö†Ô∏è Ocorreu um erro inesperado. Verifique os logs.", ephemeral=True)


# Comando /resetar
@tree.command(name="resetar", description="Limpa seu hist√≥rico de conversa com o Agente Serb")
async def reset_command(interaction: discord.Interaction):
    
    user_id = interaction.user.id
    if reset_chat(user_id):
        await interaction.response.send_message("‚úÖ Seu hist√≥rico de conversa foi limpo!", ephemeral=True)
    else:
        await interaction.response.send_message("‚ÑπÔ∏è Voc√™ n√£o tinha um hist√≥rico de conversa ativo.", ephemeral=True)


# --- MUDAN√áA: on_message agora cuida APENAS do !limpar ---
@client.event
async def on_message(message):
    
    if message.author == client.user:
        return

    # 0. Comando de modera√ß√£o: !limpar (Seu c√≥digo original, sem altera√ß√£o)
    if message.content.lower().startswith("!limpar"):
        if message.guild is None:
            await message.channel.send("Este comando s√≥ pode ser usado em servidores.")
            return
        
        author_perms = message.author.guild_permissions
        if not (author_perms.administrator or author_perms.manage_messages):
            await message.channel.send("‚ùå Voc√™ n√£o tem permiss√£o para apagar mensagens.")
            return

        me = message.guild.me
        if me is None:
            me = await message.guild.fetch_member(client.user.id)
        bot_perms = message.channel.permissions_for(me)
        
        if not bot_perms.manage_messages:
            await message.channel.send("‚ùå Eu n√£o tenho permiss√£o de 'Gerenciar Mensagens' neste canal.")
            return

        parts = message.content.split()
        limit_to_use = None
        if len(parts) > 1:
            arg = parts[1].lower()
            if arg not in ("tudo", "all", "*"):
                try:
                    qty = int(arg)
                    limit_to_use = (qty + 1) if qty >= 1 else 2
                except ValueError:
                    await message.channel.send("Uso: !limpar [quantidade|tudo]")
                    return
        
        try:
            deleted = await message.channel.purge(limit=limit_to_use)
            confirm_text = f"üßπ Apaguei {max(len(deleted) - 1, 0)} mensagem(ns)."
            notice = await message.channel.send(confirm_text)
            await asyncio.sleep(3)
            await notice.delete()
        except Exception as e:
            print(f"Erro ao limpar mensagens: {e}")
        return

    # MUDAN√áA: Toda a l√≥gica de "!reset" e "@men√ß√£o" foi REMOVIDA daqui
    # Isso evita que o bot responda duas vezes (pela men√ß√£o e pelo /comando)
    # E centraliza a l√≥gica nos novos comandos de barra.


# --- Iniciar o Bot ---
# WEBHOOK_URL √© opcional - o bot funciona sem ele, respondendo diretamente no canal
if DISCORD_TOKEN and GOOGLE_API_KEY_LOADED:
    try:    
        client.run(DISCORD_TOKEN)
    except discord.LoginFailure:
        print("ERRO: O Token do Discord √© inv√°lido. Verifique o seu .env.")
    except Exception as e:
        print(f"Ocorreu um erro ao iniciar o bot: {e}")
else:
    print("ERRO: Uma das chaves obrigat√≥rias (.env) est√° faltando:")
    if not DISCORD_TOKEN: 
        print("- DISCORD_BOT_TOKEN n√£o encontrada.")
    if not GOOGLE_API_KEY_LOADED: 
        print("- GOOGLE_API_KEY n√£o encontrada.")
    print("\nNota: DISCORD_WEBHOOK_URL √© opcional. Se n√£o configurar, o bot responder√° diretamente no canal.")