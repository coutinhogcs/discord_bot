import os
import discord
import requests
import aiohttp
from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.genai.errors import APIError

# --- Configura√ß√£o de Vari√°veis de Ambiente ---
load_dotenv() # Carrega o .env (incluindo GOOGLE_API_KEY)
DISCORD_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")
# A GOOGLE_API_KEY √© lida automaticamente pela biblioteca genai

# --- Configura√ß√£o Global da LLM (Usando SUA configura√ß√£o do AI Studio) ---

# 1. Defini√ß√£o da Persona/Instru√ß√£o do Sistema
SYSTEM_INSTRUCTION_TEXT = """
Voc√™ √© um agente de uma comunidade digital que passa informa√ß√µes sobre sites de emprego no brasil. O nome dessa comunidade √© Serb.
Voc√™ vai dar informa√ß√µes sobre vaga, informa√ß√µes de como melhorar o curriculo e tudo que ajude a uma pessoa conseguir o seu emprego.
Voc√™ poder√° responder enviando links de sites que publicam vagas como gupy, linkedin, glassdor, programathor entre outros.
Voc√™ ir√° procurar na internet como e formar curr√≠culos que esses pr√≥prios sites leem e colocam em primeiro lugar.
Voc√™ vai tirar qualquer d√∫vida de vaga sempre que possivel.
Voc√™ deve responder de forma agrad√°vel sempre que alguem perguntar de forma neutra ou agrad√°vel. E sempre que houver agressividade voc√™ deve responder de forma emp√°tica. Nos dois casos deve sempre adicionar emoji as resposta.
Sempre que for solicitado que voc√™ encontre vaga de algo, como back end voc√™ deve enviar um link onde j√° ache a p√°gina com vagas backend do site requisitado.
Voc√™ deve apenas se ater no quesito emprego.
"""

# 2. Defini√ß√£o da Configura√ß√£o de Gera√ß√£o (temperatura, tools, system_instruction)
GENERATION_CONFIG = types.GenerateContentConfig(
    temperature=2,
    tools=[types.Tool(googleSearch=types.GoogleSearch())],
    system_instruction=[types.Part.from_text(text=SYSTEM_INSTRUCTION_TEXT)],
)



# --- Inicializa√ß√£o da API e Chat ---
# O Client l√™ a GOOGLE_API_KEY do ambiente
client_ai = genai.Client()

# Vari√°vel Global para Manter o Contexto (Hist√≥rico)
global gemini_chat

# Criar chat usando o client com modelo e config
gemini_chat = client_ai.chats.create(model='gemini-2.5-pro', config=GENERATION_CONFIG)


# --- Fun√ß√µes Auxiliares de Discord e Webhook ---

def _split_discord_message(text: str, chunk_size: int = 2000):
    if text is None:
        return []
    s = str(text)
    return [s[i:i+chunk_size] for i in range(0, len(s), chunk_size)] or [""]


async def send_webhook_message(webhook_url: str, content: str, username: str = "Agente Serb (Gemini AI)", avatar_url: str = None):
    """Envia mensagem via Webhook de forma ass√≠ncrona; retorna True se ok."""
    safe_content = (content or "").strip()
    if not safe_content:
        print("Aviso: conte√∫do vazio; envio via Webhook ignorado.")
        return False

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=20)) as session:
            for chunk in _split_discord_message(safe_content):
                payload = {
                    "content": chunk,
                    "username": username,
                    "avatar_url": avatar_url,
                }
                async with session.post(webhook_url, json=payload) as resp:
                    if resp.status < 200 or resp.status >= 300:
                        text = await resp.text()
                        print(f"Erro Webhook HTTP {resp.status}: {text}")
                        return False
    except Exception as e:
        print(f"Erro ao enviar mensagem via Webhook (async): {e}")
        return False
    return True

# --- Configura√ß√£o e Eventos do Discord Bot ---

intents = discord.Intents.default()
intents.message_content = True 
client = discord.Client(intents=intents)

@client.event
async def on_ready():
    print(f'Bot est√° logado como {client.user} e pronto para interagir como Agente Serb.')

@client.event
async def on_message(message):
    global gemini_chat

    if message.author == client.user:
        return

    # 0. Comando de modera√ß√£o: limpar mensagens (admins)
    if message.content.lower().startswith("!limpar"):
        # Bloqueia DMs
        if message.guild is None:
            await message.channel.send("Este comando s√≥ pode ser usado em servidores.")
            return

        # Verifica permiss√µes do autor (admin ou gerenciar mensagens)
        author_perms = message.author.guild_permissions
        if not (author_perms.administrator or author_perms.manage_messages):
            await message.channel.send("‚ùå Voc√™ n√£o tem permiss√£o para apagar mensagens.")
            return

        # Verifica permiss√µes do bot
        me = message.guild.me
        if me is None:
            me = await message.guild.fetch_member(client.user.id)
        bot_perms = message.channel.permissions_for(me)
        if not bot_perms.manage_messages:
            await message.channel.send("‚ùå Eu n√£o tenho permiss√£o de 'Gerenciar Mensagens' neste canal.")
            return

        # Parse da quantidade
        parts = message.content.split()
        limit_to_use = None  # None = apagar todas as mensagens dispon√≠veis
        if len(parts) > 1:
            arg = parts[1].lower()
            if arg in ("tudo", "all", "*"):
                limit_to_use = None
            else:
                try:
                    qty = int(arg)
                except ValueError:
                    await message.channel.send("Uso: !limpar [quantidade|tudo]")
                    return
                # Limites b√°sicos (se n√∫mero fornecido)
                if qty < 1:
                    qty = 1
                limit_to_use = qty + 1  # inclui a mensagem do comando

        # Executa o purge (None = tudo, n√∫mero = quantidade)
        deleted = await message.channel.purge(limit=limit_to_use)
        # Confirma√ß√£o r√°pida
        confirm_text = f"üßπ Apaguei {max(len(deleted) - 1, 0)} mensagem(ns)."
        notice = await message.channel.send(confirm_text)
        # Remove a confirma√ß√£o ap√≥s alguns segundos para n√£o poluir
        try:
            import asyncio
            await asyncio.sleep(3)
            await notice.delete()
        except Exception:
            pass
        return

    # 1. Comando de Reset
    if message.content.lower().strip() == "!reset":
        # Recriar chat com a mesma configura√ß√£o
        gemini_chat = client_ai.chats.create(model='gemini-2.5-pro', config=GENERATION_CONFIG)
        await message.channel.send("‚úÖ Hist√≥rico de conversa com o Agente Serb limpo! Podemos come√ßar um novo t√≥pico sobre empregos.")
        return

    # 2. Comando de Conversa√ß√£o (s√≥ se for mencionado)
    if client.user.mentioned_in(message):
        
        prompt = message.content.replace(f'<@{client.user.id}>', '').strip()
        
        if not prompt:
            await message.channel.send("üëã Ol√°! Sou o Agente Serb. Pergunte-me sobre vagas de emprego, curr√≠culos ou sites de carreira.")
            return

        async with message.channel.typing():
            try:
                response = gemini_chat.send_message(prompt)
                gemini_text = response.text
                
                sent = False
                if WEBHOOK_URL:
                    sent = await send_webhook_message(WEBHOOK_URL, gemini_text)
                if not sent:
                    for part in _split_discord_message(gemini_text):
                        await message.channel.send(part)

            except APIError as e:
                print(f"Erro da API Gemini: {e}")
                await message.channel.send("‚ùå Desculpe, houve um erro ao processar sua solicita√ß√£o no Gemini.")
            except Exception as e:
                print(f"Erro geral: {e}")
                await message.channel.send("‚ö†Ô∏è Ocorreu um erro inesperado. Verifique os logs.")


# --- Iniciar o Bot ---
# CORRE√á√ÉO DO BUG 2: Verificar as chaves corretas
GOOGLE_API_KEY_LOADED = os.getenv("GOOGLE_API_KEY")

if DISCORD_TOKEN and WEBHOOK_URL and GOOGLE_API_KEY_LOADED:
    try:
        client.run(DISCORD_TOKEN)
    except discord.LoginFailure:
        print("ERRO: O Token do Discord √© inv√°lido. Verifique o seu .env.")
    except Exception as e:
        print(f"Ocorreu um erro ao iniciar o bot: {e}")
else:
    print("ERRO: Uma das chaves (.env) est√° faltando. Verifique se todas existem:")
    if not DISCORD_TOKEN: print("- DISCORD_BOT_TOKEN n√£o encontrada.")
    if not WEBHOOK_URL: print("- DISCORD_WEBHOOK_URL n√£o encontrada.")
    if not GOOGLE_API_KEY_LOADED: print("- GOOGLE_API_KEY n√£o encontrada (lembre-se, o nome mudou!).")